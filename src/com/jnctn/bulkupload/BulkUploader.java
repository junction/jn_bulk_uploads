/*
 * BulkUploader.java
 *
 * Created on Jul 12, 2010, 10:39:51 PM
 */
package com.jnctn.bulkupload;

import com.jnctn.bulkupload.controller.BulkUploaderController;
import com.jnctn.bulkupload.controller.ProgressController;
import com.jnctn.bulkupload.util.LogFactory;

import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import javax.swing.JEditorPane;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.UIManager;
import javax.swing.event.*;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.apache.log4j.FileAppender;
import org.apache.log4j.RollingFileAppender;

/**
 * @author martin
 */
public class BulkUploader extends javax.swing.JFrame {

    private static Logger logger = Logger.getLogger(BulkUploader.class);

    private BulkUploaderController guiController;
    private File csvFile = null;

    /** Creates new form BulkUploader */
    public BulkUploader() {
	initComponents();
	setLocationRelativeTo(null);
	guiController = new BulkUploaderController();
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
	java.awt.GridBagConstraints gridBagConstraints;

	String domain   = "";
	String username = "";
	String csv      = "";

        csvFileChooser       = new javax.swing.JFileChooser();
        panelAuthCredentials = new javax.swing.JPanel();
        jLabel1 	     = new javax.swing.JLabel();
        textFieldUsername    = new javax.swing.JTextField();
        jLabel2 	     = new javax.swing.JLabel();
        jLabel3 	     = new javax.swing.JLabel();
        textFieldDomain      = new javax.swing.JTextField();
        passwordField 	     = new javax.swing.JPasswordField();
        jLabel4 	     = new javax.swing.JLabel();
        panelChooseFile      = new javax.swing.JPanel();
        chooseFileButton     = new javax.swing.JButton();
        labelCsvFilePath     = new javax.swing.JLabel();
        startButtonPanel     = new javax.swing.JPanel();
        uploadButton 	     = new javax.swing.JButton();
        jSeparator2 	     = new javax.swing.JSeparator();
        statusPanel 	     = new javax.swing.JPanel();
        statusMessageLabel   = new javax.swing.JLabel();
        progressBar          = new javax.swing.JProgressBar();
        menuBar 	     = new javax.swing.JMenuBar();
        fileMenu 	     = new javax.swing.JMenu();
        exitMenuItem 	     = new javax.swing.JMenuItem();
        helpMenu 	     = new javax.swing.JMenu();
        aboutMenuItem 	     = new javax.swing.JMenuItem();

        jLabel1.setFont (new Font("Arial", Font.PLAIN, 14));
        jLabel2.setFont (new Font("Arial", Font.PLAIN, 14));
        jLabel3.setFont (new Font("Arial", Font.PLAIN, 14));

        /** Read properties file **/
        Properties properties = new Properties();
        try {
	    String homeDir   = System.getProperty("user.home");
	    String separator = System.getProperty("file.separator");
	    File f = new File(homeDir);
	    if (f.exists()){
		properties.load(new FileInputStream(homeDir + separator + "jn_bulk_loader.properties"));
		domain   = properties.getProperty("domain", "");
		username = properties.getProperty("username", "");
		csv = properties.getProperty("csv", "");
		csvFile = new File(csv);
		if (!csvFile.exists()){
		    csvFileChooser.setCurrentDirectory(new java.io.File(homeDir));
		}
	    }
        } catch (IOException e) { }
        org.jdesktop.application.ResourceMap resourceMap =
	  org.jdesktop.application.Application.getInstance(com.jnctn.bulkupload.DesktopApplication1.class).
	  getContext().getResourceMap(BulkUploader.class);
        csvFileChooser.setDialogTitle(resourceMap.getString("csvFileChooser.dialogTitle")); // NOI18N
        csvFileChooser.setName("csvFileChooser"); // NOI18N
        csvFileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                csvFileChooserActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setMinimumSize(new java.awt.Dimension(500, 250));
        setName("Form"); // NOI18N
        getContentPane().setLayout(new java.awt.GridBagLayout());

        panelAuthCredentials.setName("panelAuthCredentials"); // NOI18N
        panelAuthCredentials.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N
        gridBagConstraints        = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx  = 0;
        gridBagConstraints.gridy  = 1;
        gridBagConstraints.ipadx  = 2;
        gridBagConstraints.ipady  = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 1, 5);
        panelAuthCredentials.add(jLabel1, gridBagConstraints);

        textFieldUsername.setText (username/*resourceMap.getString("textFieldUsername.text")*/); // NOI18N
        textFieldUsername.setMinimumSize (new java.awt.Dimension(300, 30));
        textFieldUsername.setName ("textFieldUsername"); // NOI18N
        textFieldUsername.setPreferredSize (new java.awt.Dimension(300, 30));
        textFieldUsername.setFont (new Font ("Arial", Font.PLAIN, 16));
        gridBagConstraints        = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx  = 1;
        gridBagConstraints.gridy  = 1;
        gridBagConstraints.ipadx  = 2;
        gridBagConstraints.ipady  = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 1, 5);
        panelAuthCredentials.add(textFieldUsername, gridBagConstraints);

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N
        gridBagConstraints        = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx  = 0;
        gridBagConstraints.gridy  = 2;
        gridBagConstraints.ipadx  = 2;
        gridBagConstraints.ipady  = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 1, 5);
        panelAuthCredentials.add(jLabel2, gridBagConstraints);

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N
        gridBagConstraints        = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx  = 0;
        gridBagConstraints.gridy  = 3;
        gridBagConstraints.ipadx  = 2;
        gridBagConstraints.ipady  = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 1, 5);
        panelAuthCredentials.add(jLabel3, gridBagConstraints);

        textFieldDomain.setText(domain/*resourceMap.getString("textFieldDomain.text")*/); // NOI18N
        textFieldDomain.setMinimumSize(new java.awt.Dimension(300, 30));
        textFieldDomain.setName("textFieldDomain"); // NOI18N
        textFieldDomain.setPreferredSize(new java.awt.Dimension(300, 30));
        textFieldDomain.setFont(new Font("Arial", Font.PLAIN, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 2;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 1, 5);
        panelAuthCredentials.add(textFieldDomain, gridBagConstraints);

        passwordField.setText(resourceMap.getString("passwordField.text")); // NOI18N
        passwordField.setMinimumSize(new java.awt.Dimension(300, 30));
        passwordField.setName("passwordField"); // NOI18N
        passwordField.setPreferredSize(new java.awt.Dimension(300, 30));
        passwordField.setFont(new Font("Arial", Font.PLAIN, 16));
        gridBagConstraints        = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx  = 1;
        gridBagConstraints.gridy  = 2;
        gridBagConstraints.ipadx  = 2;
        gridBagConstraints.ipady  = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 1, 5);
        panelAuthCredentials.add(passwordField, gridBagConstraints);

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N
        jLabel4.setFont(new Font("Arial", Font.PLAIN, 16));
        //jLabel4.setForeground(Color.blue);
        jLabel4.setMinimumSize(new java.awt.Dimension(500, 40));
        jLabel4.setPreferredSize(new java.awt.Dimension(500, 40));

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 0);
        panelAuthCredentials.add(jLabel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 17, 0, 0);
        getContentPane().add(panelAuthCredentials, gridBagConstraints);

        panelChooseFile.setMinimumSize(new java.awt.Dimension(465, 37));
        panelChooseFile.setName("panelChooseFile"); // NOI18N
        panelChooseFile.setPreferredSize(new java.awt.Dimension(465, 40));
        panelChooseFile.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        chooseFileButton.setText(resourceMap.getString("chooseFileButton.text")); // NOI18N
        chooseFileButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        chooseFileButton.setName("chooseFileButton"); // NOI18N
        chooseFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseFileButtonActionPerformed(evt);
            }
        });
        panelChooseFile.add(chooseFileButton);

        labelCsvFilePath.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        labelCsvFilePath.setText(""); // NOI18N
        labelCsvFilePath.setMaximumSize(new java.awt.Dimension(500, 14));
        labelCsvFilePath.setName("labelCsvFilePath"); // NOI18N
        labelCsvFilePath.setPreferredSize(new java.awt.Dimension(350, 14));
        labelCsvFilePath.setForeground(Color.BLUE);
        if(csvFile != null && csvFile.canRead()){
            labelCsvFilePath.setText(csvFile.getPath());
            labelCsvFilePath.setToolTipText(csvFile.getPath());
        }
        panelChooseFile.add(labelCsvFilePath);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 0);
        getContentPane().add(panelChooseFile, gridBagConstraints);

        startButtonPanel.setName("startButtonPanel"); // NOI18N

        uploadButton.setFont(resourceMap.getFont("uploadButton.font")); // NOI18N
        uploadButton.setText(resourceMap.getString("uploadButton.text")); // NOI18N
        uploadButton.setName("uploadButton"); // NOI18N
        uploadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadButtonActionPerformed(evt);
            }
        });
        startButtonPanel.add(uploadButton);

        gridBagConstraints        = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx  = 0;
        gridBagConstraints.gridy  = 3;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        getContentPane().add(startButtonPanel, gridBagConstraints);

        jSeparator2.setName("jSeparator2"); // NOI18N
        gridBagConstraints       = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill  = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(jSeparator2, gridBagConstraints);

        statusPanel.setName("statusPanel"); // NOI18N
        statusPanel.setPreferredSize(new java.awt.Dimension(500, 35));

        statusMessageLabel.setText(resourceMap.getString("statusMessageLabel.text")); // NOI18N
        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 299, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE,
			      javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, statusPanelLayout.createSequentialGroup()
                        .addContainerGap(13, Short.MAX_VALUE)
                        .addComponent(statusMessageLabel))
                    .addGroup(statusPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE,
				      javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill  = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(statusPanel, gridBagConstraints);

        menuBar.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setMnemonic('F');
        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText(resourceMap.getString("exitMenuItem.text")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setMnemonic('H');
        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setMnemonic('A');
        aboutMenuItem.setText(resourceMap.getString("aboutMenuItem.text")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N        
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {            	
                aboutMenuItemActionPerformed(evt);
            }
        });        
        helpMenu.add(aboutMenuItem);
        menuBar.add(helpMenu);
        setJMenuBar(menuBar);          
        addWindowListener( new WindowAdapter() {
            public void windowOpened( WindowEvent e ){
            	if (textFieldUsername.getText().length() > 0){
            		passwordField.requestFocus();
            	}else{
            		textFieldUsername.requestFocus();
            	}
            }            
        });
        
        passwordField.addKeyListener( new KeyAdapter() {        	
           public void keyPressed(KeyEvent e) {
             int key = e.getKeyCode();             
             if (key == KeyEvent.VK_ENTER) {                 
            	uploadButtonActionPerformed(null);
             }
           }
        });
       
        textFieldUsername.addKeyListener( new KeyAdapter() {        	
            public void keyPressed(KeyEvent e) {
              int key = e.getKeyCode();             
              if (key == KeyEvent.VK_ENTER) {
            	  uploadButtonActionPerformed(null);
              }
            }
        });
        
        
        textFieldDomain.addKeyListener( new KeyAdapter() {        	
            public void keyPressed(KeyEvent e) {
              int key = e.getKeyCode();              
              if (key == KeyEvent.VK_ENTER) {
            	  uploadButtonActionPerformed(null);                 
              }
            }
        });
        
        uploadButton.addKeyListener( new KeyAdapter() {        	
            public void keyPressed(KeyEvent e) {
              int key = e.getKeyCode();              
              if (key == KeyEvent.VK_ENTER) {
            	  uploadButtonActionPerformed(null);                 
              }
            }
        });
        
        this.setResizable(false);
        pack();
    }

    private void setPropertiesStore() {
	/** Read properties file **/
        Properties properties = new Properties();         
        try { 
        	String username = textFieldUsername.getText().trim();
        	String domain   = textFieldDomain.getText().trim();
        	properties.setProperty("username", username);
        	properties.setProperty("domain"  , domain);
        	if (csvFile.exists()){
        		properties.setProperty("csv", csvFile.getAbsolutePath());
        	}        	        	
        	String homeDir   = System.getProperty("user.home");
        	String separator = System.getProperty("file.separator");
        	File f = new File(homeDir);
        	if (f.exists()){
        		properties.store(new FileOutputStream(homeDir + separator + "jn_bulk_loader.properties"), null);         		        		
        	}        	 
        } catch (IOException e) { } 
	    /** Write properties file. **/
    }

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
	System.exit(0);
    }

    private void chooseFileButtonActionPerformed(java.awt.event.ActionEvent evt) {
	/** Load the file chooser **/
	guiController.loadFileChooser(this, csvFileChooser);
    }

    private void csvFileChooserActionPerformed(java.awt.event.ActionEvent evt) {
	if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) {
	    /** Populate the text field with the path of the chosen file **/
	    guiController.runInSwingThread(new Runnable() {
	        @Override
		public void run() {
		    labelCsvFilePath.setText(csvFileChooser.getSelectedFile().getAbsolutePath());
		    labelCsvFilePath.setToolTipText(labelCsvFilePath.getText());
		    setCsvFile(csvFileChooser.getSelectedFile());
		}
	    });
	}
    }

    private void uploadButtonActionPerformed (java.awt.event.ActionEvent evt) {
	/** Validate input **/
	final List<String> errors = new ArrayList<String>();
	if (!guiController.validateInput(errors, textFieldUsername.getText(), passwordField.getPassword(), textFieldDomain.getText(), csvFile)) {
	    guiController.runInSwingThread (new Runnable() {
	        @Override
		public void run() {
		    final String message = "Please address the following errors.\n\n" + StringUtils.join(errors, "\n");
		    JOptionPane.showMessageDialog(BulkUploader.this,
						  message,
						  "Input Error",
						  JOptionPane.ERROR_MESSAGE);
		    }
		});
	    return;
	}

	/** start the magic **/
	Thread uploadTask = new Thread(new Runnable() {
	    @Override
	    public void run() {
		try {
		    guiController.startUpload(new ProgressController(progressBar, statusMessageLabel), 
					      textFieldUsername.getText(), passwordField.getPassword(), 
					      textFieldDomain.getText(), csvFile);
					
		    /** we update UI input into a file store **/
		    BulkUploader.this.setPropertiesStore();					
		    guiController.runInSwingThread(new Runnable() {
		        @Override
			public void run() {														
			    FileAppender appender = (FileAppender) Logger.getRootLogger().getAppender("R");
			    String f = "";
			    if (appender != null) {
				f = appender.getFile();
			    }
			    String s = guiController.toString() + "\n";
														
			    Object[] options = {	
				"Show me the log",							                   
				"Close this window"
			    };
							
			    int n = JOptionPane.showOptionDialog(BulkUploader.this, s,
								 "Processing Results",
							    JOptionPane.YES_NO_OPTION,
							    JOptionPane.INFORMATION_MESSAGE,
							    null,
							    options,
							    options[1]);
							
							if (n == JOptionPane.YES_OPTION && appender != null){
								Runtime r = Runtime.getRuntime();
								try {	
									if (System.getProperty("mrj.version") != null) { 
										r.exec("open -e " + appender.getFile());		
									}
								} catch (IOException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
							}
														
						}
					});
					
				} catch (Exception e) {
					logger.error("Error processing file", e);
					guiController.runInSwingThread(new Runnable() {
						@Override
						public void run() {
							FileAppender appender = (FileAppender) Logger.getRootLogger().getAppender("R");
							String f = "";
							if (appender != null){								
								f = "<a href=\"file://" + appender.getFile() + "\">" +
										appender.getFile() + 
									"</a>";
							}else{
								f = "Couldn't find log location";
							}
														
							//Custom button text
							Object[] options = {"Yes, show me the log",							                   
							                    "No, just close this window"};
							
							int n = JOptionPane.showOptionDialog(BulkUploader.this,
									"<html>There was an error processing the file. <br/> " + 
									"Would you like to see the log file for details? <br/> " + f + "</html>",
							    "Processing Error",
							    JOptionPane.YES_NO_OPTION,
							    JOptionPane.ERROR_MESSAGE,
							    null, options, options[1]);
							
							if (n == JOptionPane.YES_OPTION && appender != null){
								Runtime r = Runtime.getRuntime();
								try {				
									if (System.getProperty("mrj.version") != null) {
										r.exec("open -e " + appender.getFile());
									}
								} catch (IOException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
							}
														
						}						
					});

				}
			}
		}, "Upload Task");

		uploadTask.start();
    }

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
	/** TODO add your handling code here: **/
	guiController.runInSwingThread(new Runnable() {
	    @Override
	    public void run() {
	        AboutDialog about = new AboutDialog(BulkUploader.this);
	        about.setLocationRelativeTo(BulkUploader.this);
	        about.setVisible(true);
	    }
        });
    }

    /** @param args the command line arguments **/
    public static void main (final String args[]) {
	java.awt.EventQueue.invokeLater ( new Runnable() {
	    @Override
	    public void run() {
		try {		   
		    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		} catch (Exception e) {
		    Logger.getLogger(BulkUploader.class).error("Error setting LAF", e);
		}		
		BulkUploader bu = new BulkUploader();	
		if(args.length > 0){
		    /** First expected to be the path to the CSV file **/
		    String filePath = args[0];
		    File csv = new File(filePath);
		    if (csv != null && csv.canRead()){
			bu.setCsvFile(csv);
			bu.labelCsvFilePath.setText(filePath);
		    }
		}
		bu.setVisible(true);
	    }
        });
    }
    
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JButton chooseFileButton;
    private javax.swing.JFileChooser csvFileChooser;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel labelCsvFilePath;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JPanel panelAuthCredentials;
    private javax.swing.JPanel panelChooseFile;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JPanel startButtonPanel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JTextField textFieldDomain;
    private javax.swing.JTextField textFieldUsername;
    private javax.swing.JButton uploadButton;
   
    public void setCsvFile(File csvFile) {
	this.csvFile = csvFile;
    }
}
